% Solve an Autoregression Problem with External Input with a NARX Neural Network
% Script generated by Neural Time Series app
% Created 16-Jul-2020 10:07:33
%
% This script assumes these variables are defined:
%
%   Inputn - input time series.
%   Outputn - feedback time series.

X = tonndata(Inputn,false,false);
T = tonndata(Outputn,false,false);

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Nonlinear Autoregressive Network with External Input
% JUST ADDED SOME VARIBLES BELOW TO STORE IT FOR FURTHER USE
d1=3; %TOTAL NUMBER OF INPUT DELAYS
d2=2; %TOTAL NUMBER OF FEEDBACK DELAYS
nh=2; %TOTAL NUMBER OF HIDDEN NEURONS
no=1; %TOTAL NUMBER OF OUTPUT NEURONS
inputDelays = 1:d1;
feedbackDelays = 1:d2;
hiddenLayerSize = nh;
net = narxnet(inputDelays,feedbackDelays,hiddenLayerSize,'open',trainFcn);

% net=init(net); %INITILIASE THE NETWORK EVERTIME YOU TRAIN
% Choose Input and Feedback Pre/Post-Processing Functions
% Settings for feedback input are automatically applied to feedback output
% For a list of all processing functions type: help nnprocess
% Customize input parameters at: net.inputs{i}.processParam
% Customize output parameters at: net.outputs{i}.processParam

% net.inputs{1}.processFcns = {'removeconstantrows','mapminmax'};
% net.inputs{2}.processFcns = {'removeconstantrows','mapminmax'};

%THE BELOW IS MODIFIED AS WE ALREADY NORMALISED THE INPUT/OUTUT AND DO NOT
%REQUIRE MAPMINMAX AND NOW COMMENTED ABOVE
% net.inputs{1}.processFcns={};
% net.outputs{2}.processFcns={};

% Prepare the Data for Training and Simulation
% The function PREPARETS prepares timeseries data for a particular network,
% shifting time by the minimum amount to fill input states and layer
% states. Using PREPARETS allows you to keep your original time series data
% unchanged, while easily customizing it for networks with differing
% numbers of delays, with open loop or closed loop feedback modes.
[x,xi,ai,t] = preparets(net,X,{},T);

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivide
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'time';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error


% CHANGE THE PARAMETERS FOR OPEN NETWORK TRAINING
net.trainParam.epochs=100;
net.trainParam.goal=0.0;
net.trainParam.show=10;
net.trainParam.max_fail=10;
net.trainParam.min_grad=0;

%CHANGE THE SAMPLE TIME TO REFLECT THE SAMPLING INTERVAL OF THE DATA
net.SampleTime=0.01;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Train the Network
[net,tr] = train(net,x,t,xi,ai);

% Test the Network and PLOT THE PERFORMANCE
y = net(x,xi,ai);
performance = perform(net,t,y)
figure(1);
plot(cell2mat(t));
hold
plot(cell2mat(y),'r');
title('Open Loop Performance');
% Closed Loop Network
% Use this network to do multi-step prediction.
% The function CLOSELOOP replaces the feedback input with a direct
% connection from the outout layer.
% 
 netc = closeloop(net);

 [xc,xic,aic,tc] = preparets(netc,X,{},T);
 

%CHANGE THE SAMPLE TIME TO REFLECT THE SAMPLING INTERVAL OF THE DATA
netc.SampleTime=0.01;

% OBSERVE CLOSE NETWORK netc PERFORMANCE 

 yc = netc(xc,xic,aic);
 closedLoopPerformance = perform(netc,tc,yc)
 figure(2);
 plot(cell2mat(tc));
 hold
 plot(cell2mat(yc),'r');
 title('Closed Loop Performance');
% Multi-step Prediction
% Sometimes it is useful to simulate a network in open-loop form for as
% long as there is known output data, and then switch to closed-loop form
% to perform multistep prediction while providing only the external input.
% Here the input series and target series are first used
% to simulate the network in open-loop form, taking advantage of the higher
% accuracy that providing the target series produces:
% REMOVE REST AS NOT REQUIRED FOR THIS CLASS